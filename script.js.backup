// script.js - –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –¥–ª—è "–ö–∞–º–µ—Ä—Ç–æ–Ω 2026"

import { gameData } from './gameData.js';

// === –ù–ê–°–¢–†–û–ô–ö–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø (–ù–û–í–û–ï) ===
let userSettings = {
    textSpeed: 1.0, // 0.5x, 1x, 2x
    bgmVolume: 0.4,
    sfxVolume: 0.3,
    skipTutorial: false
};

// === –£–¢–ò–õ–ò–¢–´ ===
// Debounce —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∞—Å—Ç—ã—Ö –≤—ã–∑–æ–≤–æ–≤
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ localStorage
function loadSettings() {
    try {
        const saved = localStorage.getItem('kamerton_settings');
        if (saved) {
            userSettings = { ...userSettings, ...JSON.parse(saved) };
        }
    } catch (e) {
        console.warn('Failed to load settings:', e);
    }
}

// Debounced –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
const debouncedSaveSettings = debounce(() => {
    try {
        localStorage.setItem('kamerton_settings', JSON.stringify(userSettings));
    } catch (e) {
        console.warn('Failed to save settings:', e);
    }
}, 500);

function saveSettings() {
    debouncedSaveSettings();
}

// === DOM –≠–õ–ï–ú–ï–ù–¢–´ ===
const storyText = document.getElementById('story-text');
const choicesContainer = document.getElementById('choices-container');
const locationText = document.getElementById('location');
const backgroundImage = document.getElementById('background-image');
const spriteArea = document.getElementById('sprite-area');
const hintButton = document.getElementById('hint-button');
const speakerName = document.getElementById('speaker-name');
const continuePrompt = document.getElementById('continue-prompt');
const transitionOverlay = document.getElementById('transition-overlay');
const loadingOverlay = document.getElementById('loading-overlay');
const loadingText = document.getElementById('loading-text');
const startGameButton = document.getElementById('start-game-button');
const gameContainer = document.getElementById('game-container');
const progressIndicator = document.getElementById('progress-indicator');
const endingScreen = document.getElementById('ending-screen');
const gameEndingVideo = document.getElementById('game-ending-video');
const finalMessage = document.getElementById('final-message');
const endingRestartButton = document.getElementById('ending-restart-button');

// –ù–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
const mainMenu = document.getElementById('main-menu');
const newGameBtn = document.getElementById('new-game-btn');
const continueGameBtn = document.getElementById('continue-game-btn');
const settingsBtn = document.getElementById('settings-btn');
const achievementsBtn = document.getElementById('achievements-btn');
const settingsScreen = document.getElementById('settings-screen');
const achievementsScreen = document.getElementById('achievements-screen');
const pauseMenuBtn = document.getElementById('pause-menu-btn');
const historyBtn = document.getElementById('history-btn');
const pauseMenu = document.getElementById('pause-menu');
const historyPanel = document.getElementById('history-panel');
const sceneProgress = document.getElementById('scene-progress');

// === –ö–û–ù–°–¢–ê–ù–¢–´ ===
const BASE_TYPING_SPEED = 25;
const ANIMATION_FRAME_DELAY = 200;
const DEFAULT_FRAMES = 6;
const TYPING_SOUND_INTERVAL = 1;

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let isAdvancing = false;
let isTyping = false;
let currentTypingResolver = null;
let currentSceneId = 'welcome_message';
let currentSceneStack = [];
let correctChoices = 0;
let totalScenes = 0;
let consequencesReport = [];
let currentStoryIndex = 0;
let isAwaitingChoice = false;
let isAwaitingConsequenceClick = false;
let typingSoundPlaybackCounter = 0;
let currentBGM = null;
let dialogHistory = []; // –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ (–ù–û–í–û–ï)
let gameState = null; // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ù–û–í–û–ï)

const ORIGINAL_HINT_TEXT = gameData['hint'] ? gameData['hint'].story[0].text : '–í–æ–∑–≤—Ä–∞—Ç...';

// === –ê–£–î–ò–û ===
const typingSound = new Audio('sound/typing.mp3');
typingSound.volume = userSettings.sfxVolume;

const transitionSound = new Audio('sound/–ø–µ—Ä–µ—Ö–æ–¥.mp3');
transitionSound.volume = userSettings.sfxVolume;

const backgroundMusic = new Audio();
backgroundMusic.volume = userSettings.bgmVolume;

// === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (–ù–û–í–û–ï) ===
const achievements = {
    first_choice: { title: '–ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä', desc: '–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä', unlocked: false, icon: 'üéØ' },
    perfect_run: { title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è', desc: '–ü—Ä–æ–π–¥–∏—Ç–µ –∏–≥—Ä—É –±–µ–∑ –æ—à–∏–±–æ–∫', unlocked: false, icon: 'üèÜ' },
    hint_master: { title: '–ú—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫', desc: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É 3 —Ä–∞–∑–∞', unlocked: false, icon: '‚òØ' },
    speed_reader: { title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —á–∏—Ç–∞—Ç–µ–ª—å', desc: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç 10 —Ä–∞–∑', unlocked: false, icon: '‚ö°' },
    storyteller: { title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π', desc: '–û—Ç–∫—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤', unlocked: false, icon: 'üìú' }
};

let hintUsedCount = 0;
let skipCount = 0;

function loadAchievements() {
    const saved = localStorage.getItem('kamerton_achievements');
    if (saved) {
        const savedAchievements = JSON.parse(saved);
        Object.keys(savedAchievements).forEach(key => {
            if (achievements[key]) {
                achievements[key].unlocked = savedAchievements[key];
            }
        });
    }
}

function unlockAchievement(key) {
    if (achievements[key] && !achievements[key].unlocked) {
        achievements[key].unlocked = true;
        showAchievementNotification(achievements[key]);
        saveAchievements();
    }
}

function saveAchievements() {
    const toSave = {};
    Object.keys(achievements).forEach(key => {
        toSave[key] = achievements[key].unlocked;
    });
    localStorage.setItem('kamerton_achievements', JSON.stringify(toSave));
}

function showAchievementNotification(achievement) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 80px;
        right: 20px;
        background: linear-gradient(135deg, #0A6836, #49a861);
        color: white;
        padding: 15px 20px;
        border-radius: 10px;
        box-shadow: 0 5px 20px rgba(0,0,0,0.5);
        z-index: 10002;
        animation: slideIn 0.5s ease-out;
        max-width: 300px;
    `;
    notification.innerHTML = `
        <div style="display: flex; align-items: center; gap: 15px;">
            <span style="font-size: 2em;">${achievement.icon}</span>
            <div>
                <div style="font-weight: bold; margin-bottom: 5px;">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
                <div style="font-size: 0.9em;">${achievement.title}</div>
            </div>
        </div>
    `;
    document.body.appendChild(notification);
    
    setTimeout(() => {
        notification.style.animation = 'slideOut 0.5s ease-in';
        setTimeout(() => notification.remove(), 500);
    }, 3000);
}

// === –°–ò–°–¢–ï–ú–ê –°–û–•–†–ê–ù–ï–ù–ò–ô (–£–õ–£–ß–®–ï–ù–ù–ê–Ø) ===
let autoSaveCounter = 0;

function saveGame(isAutoSave = false) {
    try {
        gameState = {
            currentSceneId,
            correctChoices,
            totalScenes,
            consequencesReport,
            dialogHistory,
            timestamp: Date.now()
        };
        localStorage.setItem('kamerton_save', JSON.stringify(gameState));

        if (!isAutoSave) {
            showNotification('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        }
    } catch (e) {
        console.error('Failed to save game:', e);
        if (!isAutoSave) {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
        }
    }
}

function loadGame() {
    try {
        const saved = localStorage.getItem('kamerton_save');
        if (saved) {
            gameState = JSON.parse(saved);
            currentSceneId = gameState.currentSceneId;
            correctChoices = gameState.correctChoices;
            totalScenes = gameState.totalScenes;
            consequencesReport = gameState.consequencesReport;
            dialogHistory = gameState.dialogHistory || [];
            return true;
        }
    } catch (e) {
        console.error('Failed to load game:', e);
    }
    return false;
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å—Ü–µ–Ω—ã (–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø UX)
function checkAutoSave() {
    if (currentSceneId.startsWith('scene')) {
        autoSaveCounter++;
        if (autoSaveCounter >= 3) {
            saveGame(true);
            autoSaveCounter = 0;
        }
    }
}

function showNotification(text) {
    const notification = document.createElement('div');
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(10, 104, 54, 0.95);
        color: white;
        padding: 15px 20px;
        border-radius: 8px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        z-index: 10002;
        animation: fadeInOut 2s ease-in-out;
    `;
    notification.textContent = text;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 2000);
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ê–£–î–ò–û ===
function initializeAudio() {
    typingSound.preload = 'auto';
    transitionSound.preload = 'auto';
    backgroundMusic.preload = 'auto';
    typingSound.load();
    transitionSound.load();
}

function stopTypingSound() {
    typingSound.pause();
    typingSound.currentTime = 0;
}

function updateAudioVolumes() {
    typingSound.volume = userSettings.sfxVolume;
    transitionSound.volume = userSettings.sfxVolume;
    backgroundMusic.volume = userSettings.bgmVolume;
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –†–ï–°–£–†–°–û–í (LAZY LOADING) ===
// –ö–µ—à –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
const loadedAssets = new Map();
const loadingPromises = new Map();

// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
function preloadCriticalAssets() {
    return new Promise(async (resolve) => {
        const criticalAssets = [
            'sound/typing.mp3',
            'sound/–ø–µ—Ä–µ—Ö–æ–¥.mp3',
            'sound/night.mp3', // BGM –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã
            'images/background/night.jpg' // –§–æ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ü–µ–Ω—ã
        ];

        const total = criticalAssets.length;
        let loadedCount = 0;

        loadingText.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: 0 –∏–∑ ${total}... (0%)`;

        initializeAudio();

        const loadPromises = criticalAssets.map(url => {
            return loadAsset(url).then(() => {
                loadedCount++;
                const percent = Math.round((loadedCount / total) * 100);
                loadingText.textContent = `–ó–∞–≥—Ä—É–∑–∫–∞: ${loadedCount} –∏–∑ ${total}... (${percent}%)`;
                if (progressIndicator) {
                    progressIndicator.style.width = `${percent}%`;
                }
            });
        });

        await Promise.all(loadPromises);
        resolve();
    });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–∞ —Å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
function loadAsset(url) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (loadedAssets.has(url)) {
        return Promise.resolve(loadedAssets.get(url));
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
    if (loadingPromises.has(url)) {
        return loadingPromises.get(url);
    }

    const promise = new Promise((resolve, reject) => {
        if (url.endsWith('.mp3')) {
            const audio = new Audio(url);
            audio.oncanplaythrough = () => {
                loadedAssets.set(url, audio);
                loadingPromises.delete(url);
                resolve(audio);
            };
            audio.onerror = () => {
                console.warn(`Failed to load audio: ${url}`);
                loadingPromises.delete(url);
                resolve(null); // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
            };
            audio.load();
        } else {
            const img = new Image();
            img.onload = () => {
                loadedAssets.set(url, img);
                loadingPromises.delete(url);
                resolve(img);
            };
            img.onerror = () => {
                console.warn(`Failed to load image: ${url}`);
                loadingPromises.delete(url);
                resolve(null);
            };
            img.src = url;
        }
    });

    loadingPromises.set(url, promise);
    return promise;
}

// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ü–µ–Ω—ã
async function preloadSceneAssets(sceneId) {
    const scene = gameData[sceneId];
    if (!scene) return;

    const assetsToLoad = [];

    // BGM
    if (scene.bgm) {
        assetsToLoad.push(loadAsset(scene.bgm));
    }

    // Background
    if (scene.background && scene.background.startsWith('url(')) {
        const url = scene.background.slice(4, -1).replace(/['"]/g, '');
        assetsToLoad.push(loadAsset(url));
    }

    // Sprites
    if (scene.sprites && Array.isArray(scene.sprites)) {
        scene.sprites.forEach(spriteData => {
            if (spriteData.baseSrc && spriteData.frames) {
                for (let i = 1; i <= spriteData.frames; i++) {
                    assetsToLoad.push(loadAsset(`${spriteData.baseSrc}/${i}.png`));
                }
            } else if (spriteData.src) {
                assetsToLoad.push(loadAsset(spriteData.src));
            }
        });
    }

    if (scene.sprite) {
        const spriteData = scene.sprite;
        if (spriteData.baseSrc && spriteData.frames) {
            for (let i = 1; i <= spriteData.frames; i++) {
                assetsToLoad.push(loadAsset(`${spriteData.baseSrc}/${i}.png`));
            }
        } else if (spriteData.src) {
            assetsToLoad.push(loadAsset(spriteData.src));
        }
    }

    // Story sprites
    if (scene.story) {
        scene.story.forEach(step => {
            if (step.spriteSrc) {
                for (let i = 1; i <= DEFAULT_FRAMES; i++) {
                    assetsToLoad.push(loadAsset(`${step.spriteSrc}/${i}.png`));
                }
            }
        });
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã —Å—Ü–µ–Ω—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    await Promise.all(assetsToLoad);
}

// === –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ (–ù–û–í–û–ï) ===
function showMainMenu() {
    gameContainer.style.display = 'none';
    mainMenu.style.display = 'flex';
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    if (localStorage.getItem('kamerton_save')) {
        continueGameBtn.style.display = 'block';
    } else {
        continueGameBtn.style.display = 'none';
    }
}

function hideMainMenu() {
    mainMenu.style.display = 'none';
}

// === –ù–ê–°–¢–†–û–ô–ö–ò (–ù–û–í–û–ï) ===
function showSettings() {
    settingsScreen.style.display = 'flex';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    document.getElementById('text-speed-slider').value = userSettings.textSpeed;
    document.getElementById('text-speed-value').textContent = userSettings.textSpeed + 'x';
    
    document.getElementById('bgm-volume-slider').value = userSettings.bgmVolume;
    document.getElementById('bgm-volume-value').textContent = Math.round(userSettings.bgmVolume * 100) + '%';
    
    document.getElementById('sfx-volume-slider').value = userSettings.sfxVolume;
    document.getElementById('sfx-volume-value').textContent = Math.round(userSettings.sfxVolume * 100) + '%';
    
    document.getElementById('skip-tutorial-checkbox').checked = userSettings.skipTutorial;
}

function hideSettings() {
    settingsScreen.style.display = 'none';
}

// === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø (–ù–û–í–û–ï) ===
function showAchievements() {
    achievementsScreen.style.display = 'flex';
    const list = document.getElementById('achievements-list');
    list.innerHTML = '';
    
    Object.keys(achievements).forEach(key => {
        const ach = achievements[key];
        const item = document.createElement('div');
        item.className = `achievement-item ${ach.unlocked ? 'unlocked' : 'locked'}`;
        item.innerHTML = `
            <div class="achievement-icon">${ach.icon}</div>
            <div class="achievement-info">
                <div class="achievement-title">${ach.title}</div>
                <div class="achievement-desc">${ach.desc}</div>
            </div>
        `;
        list.appendChild(item);
    });
}

function hideAchievements() {
    achievementsScreen.style.display = 'none';
}

// === –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í (–ù–û–í–û–ï) ===
function showHistory() {
    historyPanel.style.display = 'flex';
    const list = document.getElementById('history-list');
    list.innerHTML = '';
    
    if (dialogHistory.length === 0) {
        list.innerHTML = '<p style="text-align: center; opacity: 0.7;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</p>';
        return;
    }
    
    dialogHistory.forEach(entry => {
        const item = document.createElement('div');
        item.className = 'history-item';
        item.innerHTML = `
            ${entry.speaker ? `<div class="history-speaker">${entry.speaker}:</div>` : ''}
            <div>${entry.text}</div>
        `;
        list.appendChild(item);
    });
    
    list.scrollTop = list.scrollHeight;
    unlockAchievement('storyteller');
}

function hideHistory() {
    historyPanel.style.display = 'none';
}

// === –ú–ï–ù–Æ –ü–ê–£–ó–´ (–ù–û–í–û–ï) ===
function showPause() {
    pauseMenu.style.display = 'flex';
    backgroundMusic.pause();
}

function hidePause() {
    pauseMenu.style.display = 'none';
    if (currentBGM) {
        backgroundMusic.play().catch(e => console.log('BGM resume error:', e));
    }
}

// === –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ===
function typeText(text) {
    isTyping = true;
    stopTypingSound();
    storyText.textContent = '';
    document.getElementById('text-box').classList.remove('text-complete');

    return new Promise(resolve => {
        currentTypingResolver = resolve;
        let index = 0;
        const speed = BASE_TYPING_SPEED / userSettings.textSpeed;

        function printChar() {
            if (!isTyping) {
                storyText.textContent = text;
                document.getElementById('text-box').classList.add('text-complete');
                continuePrompt.style.display = 'block';
                stopTypingSound();
                skipCount++;
                if (skipCount >= 10) unlockAchievement('speed_reader');
                resolve();
                return;
            }

            if (index < text.length) {
                let char = text.charAt(index);
                storyText.textContent += char;
                
                if (typingSoundPlaybackCounter % TYPING_SOUND_INTERVAL === 0 && char.trim() !== '') {
                    typingSound.currentTime = 0;
                    typingSound.play().catch(e => console.log("Typing sound error:", e));
                }
                typingSoundPlaybackCounter++;
                
                index++;
                setTimeout(printChar, speed);
            } else {
                isTyping = false;
                document.getElementById('text-box').classList.add('text-complete');
                continuePrompt.style.display = 'block';
                stopTypingSound();
                resolve();
            }
        }
        printChar();
    });
}

function updateSpriteEmphasis(currentSpeakerName) {
    const sprites = spriteArea.querySelectorAll('.sprite');
    const excludedNames = ['–°–∏—Å—Ç–µ–º–∞', '–†–ï–®–ï–ù–ò–ï', '–ò–¢–û–ì', '–¢–≤–æ–∏ –ú—ã—Å–ª–∏', '–ü–æ–¥—Å–∫–∞–∑–∫–∞', '–í–û–ó–í–†–ê–¢'];
    
    if (sprites.length === 0 || !currentSpeakerName || excludedNames.some(name => currentSpeakerName.includes(name))) {
        sprites.forEach(sprite => sprite.classList.remove('dimmed'));
        return;
    }

    sprites.forEach(sprite => {
        const spriteName = sprite.alt;
        if (spriteName === currentSpeakerName) {
            sprite.classList.remove('dimmed');
        } else {
            sprite.classList.add('dimmed');
        }
    });
}

// === –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ò–ú–ê–¶–ò–ò –°–ü–†–ê–ô–¢–û–í ===
let animationFrameId = null;
const activeSprites = new Set();

function stopAllSpriteAnimations() {
    const sprites = spriteArea.querySelectorAll('.sprite');
    sprites.forEach(sprite => {
        activeSprites.delete(sprite);
        delete sprite.dataset.baseSrc;
        delete sprite.dataset.frames;
        delete sprite.dataset.currentFrame;
        delete sprite.dataset.lastFrameUpdate;
    });

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
    if (activeSprites.size === 0 && animationFrameId) {
        cancelAnimationFrame(animationFrameId);
        animationFrameId = null;
    }
}

function startSpriteAnimation(sprite, baseSrc, frames = DEFAULT_FRAMES) {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø—Ä–∞–π—Ç–∞
    sprite.dataset.baseSrc = baseSrc;
    sprite.dataset.frames = frames;
    sprite.dataset.currentFrame = 1;
    sprite.dataset.lastFrameUpdate = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª–µ–º
    sprite.src = `${baseSrc}/1.png`;

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–ø—Ä–∞–π—Ç–æ–≤
    activeSprites.add(sprite);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª –∞–Ω–∏–º–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if (!animationFrameId) {
        animationFrameId = requestAnimationFrame(animateSprites);
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Å–ø—Ä–∞–π—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
function animateSprites(timestamp) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–∞–π—Ç—ã
    activeSprites.forEach(sprite => {
        const baseSrc = sprite.dataset.baseSrc;
        const frames = parseInt(sprite.dataset.frames);
        const lastUpdate = parseFloat(sprite.dataset.lastFrameUpdate) || 0;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–¥—Ä
        if (timestamp - lastUpdate >= ANIMATION_FRAME_DELAY) {
            let currentFrame = parseInt(sprite.dataset.currentFrame);
            currentFrame = currentFrame >= frames ? 1 : currentFrame + 1;

            sprite.dataset.currentFrame = currentFrame;
            sprite.dataset.lastFrameUpdate = timestamp;
            sprite.src = `${baseSrc}/${currentFrame}.png`;
        }
    });

    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø—Ä–∞–π—Ç—ã
    if (activeSprites.size > 0) {
        animationFrameId = requestAnimationFrame(animateSprites);
    } else {
        animationFrameId = null;
    }
}

function updateSceneProgress() {
    const totalGameScenes = 5;
    const match = currentSceneId.match(/scene(\d+)/);
    if (match) {
        const currentNum = parseInt(match[1]);
        sceneProgress.textContent = `–°—Ü–µ–Ω–∞ ${currentNum}/${totalGameScenes}`;
    } else {
        sceneProgress.textContent = '';
    }
}

async function showScene(sceneId) {
    if (isAdvancing) return;

    if (sceneId === currentSceneId && !gameData[sceneId]?.isHint) {
        renderSceneContent(sceneId);
        return;
    }

    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã
    await preloadSceneAssets(sceneId);

    if (sceneId !== currentSceneId) {
        transitionSound.currentTime = 0;
        transitionSound.play().catch(e => console.log("Transition sound error:", e));
    }

    if (transitionOverlay) {
        transitionOverlay.classList.add('active');

        setTimeout(() => {
            renderSceneContent(sceneId);

            setTimeout(() => {
                transitionOverlay.classList.remove('active');
            }, 50);
        }, 800);
    } else {
        renderSceneContent(sceneId);
    }
}

function renderSceneContent(sceneId) {
    stopAllSpriteAnimations();
    stopTypingSound();

    const scene = gameData[sceneId];
    if (!scene) {
        console.error('–°—Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', sceneId);
        return;
    }

    if (currentSceneId === 'hint' && sceneId !== 'hint') {
        if (gameData['hint']) {
            gameData['hint'].story[0].text = ORIGINAL_HINT_TEXT;
        }
    }

    const isReturningFromHint = currentSceneId === 'hint' && sceneId !== 'hint';
    currentSceneId = sceneId;
    isAwaitingConsequenceClick = false;

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø)
    checkAutoSave();

    updateSceneProgress();

    // BGM –ª–æ–≥–∏–∫–∞
    if (scene.bgm && scene.bgm !== currentBGM) {
        currentBGM = scene.bgm;
        backgroundMusic.src = currentBGM;
        backgroundMusic.loop = true;
        
        backgroundMusic.play().catch(e => {
            console.warn("BGM autoplay blocked:", e);
            document.addEventListener('click', () => {
                backgroundMusic.play().catch(err => console.error("BGM retry error:", err));
            }, { once: true });
        });
    } else if (!scene.bgm && currentBGM) {
        backgroundMusic.pause();
        currentBGM = null;
    }
    
    locationText.textContent = scene.location;
    backgroundImage.style.backgroundImage = scene.background || 'none';

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–π—Ç–æ–≤
    spriteArea.innerHTML = '';
    let spritesToRender = [];

    if (scene.sprites && Array.isArray(scene.sprites)) {
        spritesToRender = scene.sprites;
    } else if (scene.sprite) {
        spritesToRender = [scene.sprite];
    }

    spritesToRender.forEach(spriteData => {
        const spriteDiv = document.createElement('img');
        spriteDiv.alt = spriteData.name;
        spriteDiv.className = `sprite ${spriteData.position}`;
        
        if (spriteData.baseSrc && spriteData.frames > 1) {
            startSpriteAnimation(spriteDiv, spriteData.baseSrc, spriteData.frames);
        } else {
            spriteDiv.src = spriteData.src;
        }
        
        spriteArea.appendChild(spriteDiv);
    });
    
    choicesContainer.innerHTML = '';
    choicesContainer.style.pointerEvents = 'none';
    choicesContainer.style.opacity = '0';
    hintButton.style.display = 'none';
    speakerName.style.display = 'none';
    continuePrompt.style.display = 'none';
    
    const textBox = document.getElementById('text-box');

    if (scene.isEnding) {
        updateSpriteEmphasis(null);
        generateEnding(sceneId);
        speakerName.style.display = 'none';
        textBox.onclick = null;
    } else {
        if (!isReturningFromHint) {
            currentStoryIndex = 0;
            isAwaitingChoice = false;
        }

        if (isReturningFromHint) {
            const choiceStepIndex = scene.story?.findIndex(step => step.action === 'show_choices');
            if (choiceStepIndex !== -1) {
                const step = scene.story[choiceStepIndex];
                updateSpriteEmphasis(null);
                speakerName.textContent = '–†–ï–®–ï–ù–ò–ï';
                speakerName.style.display = 'block';
                continuePrompt.style.display = 'none';
                if (step.text.includes('<span')) {
                    storyText.innerHTML = step.text;
                } else {
                    storyText.textContent = step.text;
                }
                document.getElementById('text-box').classList.add('text-complete');
                showChoices(scene);
                textBox.onclick = null;
                currentStoryIndex = choiceStepIndex;
                isAwaitingChoice = true;
                return;
            }
        }

        textBox.onclick = goToNextStoryStep;
        goToNextStoryStep();
    }
}

async function goToNextStoryStep() {
    // Fast-forward
    if (isTyping) {
        isTyping = false;
        if (currentTypingResolver) {
            currentTypingResolver();
        }
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –∏ —Å—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –∞—Ç–æ–º–∞—Ä–Ω–æ
    if (isAdvancing) return;
    isAdvancing = true;

    try {
        const scene = gameData[currentSceneId];
        
        if (isAwaitingConsequenceClick) {
            updateSpriteEmphasis(null);
            let nextSceneId = 'scene' + (totalScenes + 1);
            isAwaitingConsequenceClick = false;
            isAdvancing = false;
            
            if (gameData[nextSceneId]) {
                showScene(nextSceneId);
            } else {
                checkEnding();
            }
            return;
        }

        if (isAwaitingChoice || !scene.story || currentStoryIndex >= scene.story.length) {
            if (currentSceneId === 'hint' && !isAwaitingChoice) {
                const lastStep = scene.story[scene.story.length - 1];
                if (lastStep.action === 'show_choices') {
                    document.getElementById('text-box').onclick = null;
                    speakerName.textContent = '–í–û–ó–í–†–ê–¢';
                    speakerName.style.display = 'block';
                    continuePrompt.style.display = 'none';
                    storyText.textContent = lastStep.text;
                    showChoices(scene);
                    return;
                }
            }
            return;
        }

        const step = scene.story[currentStoryIndex];

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º (–û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø)
        if (step.text && step.action !== 'show_choices') {
            dialogHistory.push({
                speaker: step.speaker || '',
                text: step.text
            });

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 100 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
            if (dialogHistory.length > 100) {
                dialogHistory.shift();
            }
        }

        if (step.action === 'show_choices') {
            updateSpriteEmphasis(null);
            speakerName.textContent = currentSceneId === 'hint' ? '–í–û–ó–í–†–ê–¢' : '–†–ï–®–ï–ù–ò–ï';
            speakerName.style.display = 'block';
            continuePrompt.style.display = 'none';

            if (step.text.includes('<span')) {
                storyText.innerHTML = step.text;
                document.getElementById('text-box').classList.add('text-complete');
                continuePrompt.style.display = 'block';
            } else {
                await typeText(step.text);
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â–µ –Ω–µ –æ–∂–∏–¥–∞–µ–º –≤—ã–±–æ—Ä
            if (!isAwaitingChoice) {
                showChoices(scene);
            }

            document.getElementById('text-box').onclick = null;
            return;
        }

        // –°–º–µ–Ω–∞ —Å–ø—Ä–∞–π—Ç–∞
        if (step.spriteSrc && step.speaker) {
            const targetSprite = spriteArea.querySelector(`.sprite[alt="${step.speaker}"]`);
            if (targetSprite) {
                const oldIntervalId = targetSprite.dataset.intervalId;
                if (oldIntervalId) {
                    clearInterval(parseInt(oldIntervalId));
                    delete targetSprite.dataset.intervalId;
                }
                const newBaseSrc = step.spriteSrc;
                startSpriteAnimation(targetSprite, newBaseSrc, DEFAULT_FRAMES);
            }
        }

        if (step.speaker) {
            speakerName.textContent = step.speaker;
            speakerName.style.display = 'block';
            updateSpriteEmphasis(step.speaker);
        } else {
            speakerName.style.display = 'none';
            updateSpriteEmphasis(null);
        }
        
        if (step.text.includes('<span')) {
            storyText.innerHTML = step.text;
            document.getElementById('text-box').classList.add('text-complete');
            continuePrompt.style.display = 'block';
        } else {
            await typeText(step.text);
        }

        currentStoryIndex++;
    } finally {
        isAdvancing = false;
    }
}

function showChoices(scene) {
    isAwaitingChoice = true;

    choicesContainer.innerHTML = '';
    scene.choices.forEach((choice, index) => {
        const button = document.createElement('button');
        button.textContent = choice.text;
        button.className = 'choice-button';

        if (choice.nextScene === 'return') {
            button.onclick = () => {
                if (!isAdvancing && isAwaitingChoice) {
                    handleChoice(currentSceneId, index, false);
                }
            };
        } else if (currentSceneId.startsWith('tutorial') || currentSceneId.startsWith('ending') || currentSceneId === 'welcome_message') {
            button.onclick = () => {
                if (!isAdvancing) {
                    showScene(choice.nextScene);
                }
            };
        } else {
            button.onclick = () => {
                if (!isAdvancing && isAwaitingChoice) {
                    handleChoice(currentSceneId, index, false);
                    unlockAchievement('first_choice');
                }
            };
        }

        choicesContainer.appendChild(button);
    });

    choicesContainer.style.pointerEvents = 'auto';
    choicesContainer.style.opacity = '1';

    if (scene.hint && !scene.isHint && !currentSceneId.startsWith('tutorial') &&
        !currentSceneId.startsWith('ending') && currentSceneId !== 'welcome_message') {
        hintButton.style.display = 'block';
    } else {
        hintButton.style.display = 'none';
    }
}

function handleChoice(sceneId, choiceIndex, isHintRequest = false) {
    // –ó–∞—â–∏—Ç–∞ –æ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    if (isAdvancing) return;

    if (isHintRequest) {
        const currentScene = gameData[sceneId];
        if (!currentScene.hint) return;

        currentSceneStack.push(sceneId);

        if (gameData['hint']) {
            gameData['hint'].story[0].text = currentScene.hint;
        }

        hintUsedCount++;
        if (hintUsedCount >= 3) unlockAchievement('hint_master');

        showScene('hint');
        return;
    }

    const scene = gameData[sceneId];
    const choice = scene.choices[choiceIndex];

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    isAwaitingChoice = false;
    isAdvancing = true;

    choicesContainer.style.pointerEvents = 'none';
    choicesContainer.style.opacity = '0';
    hintButton.style.display = 'none';
    continuePrompt.style.display = 'none';
    document.getElementById('text-box').onclick = null;

    if (choice.nextScene === 'return') {
        const previousSceneId = currentSceneStack.pop();
        isAdvancing = false;
        showScene(previousSceneId);
        return;
    }

    if (choice.nextScene) {
        isAdvancing = false;
        showScene(choice.nextScene);
        return;
    }
    
    updateSpriteEmphasis(null);

    totalScenes++;
    let consequenceText = '';

    if (choice.correct === true) {
        correctChoices++;
        consequenceText = `${choice.consequence || ''}`;
    } else if (choice.correct === false) {
        consequenceText = `${choice.consequence || '–°–∏—Ç—É–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–∏–ª–∞—Å—å –±–µ–∑ —Ç–≤–æ–µ–≥–æ —Ä–µ—à–∞—é—â–µ–≥–æ –≤–ª–∏—è–Ω–∏—è.'}`;
    }

    consequencesReport.push({
        scene: scene.location,
        choice: choice.text,
        consequence: consequenceText,
        isCorrect: choice.correct
    });

    speakerName.textContent = '–ò–¢–û–ì';
    speakerName.style.display = 'block';
    storyText.innerHTML = `${consequenceText.replace(/\*\*/g, '<b>').replace(/\*\*/g, '</b>')}`;
    
    isAdvancing = false;
    isAwaitingConsequenceClick = true;
    document.getElementById('text-box').onclick = goToNextStoryStep;
    continuePrompt.style.display = 'block';
}

function checkEnding() {
    if (correctChoices === totalScenes && totalScenes > 0) {
        unlockAchievement('perfect_run');
        showScene('ending_secret');
    } else {
        showScene('ending_consequences');
    }
}

function generateEnding(sceneId) {
    const scene = gameData[sceneId];

    if (scene.isFinalVideo) {
        handleVideoEnding(scene);
        return;
    }

    let mainText = '';
    let reportHTML = '';
    let overallText = '';

    if (sceneId === 'ending_consequences') {
        mainText = scene.text.replace(/\*\*/g, '<b>').replace(/\*\*/g, '</b>');

        overallText = `
            <div style="margin-top: 20px; padding: 15px; background-color: rgba(10, 104, 54, 0.2); border-left: 4px solid var(--light-green); border-radius: 4px;">
                <h3 style="margin: 0 0 10px 0; color: var(--light-green);">–û–±—â–∏–π –∏—Ç–æ–≥</h3>
                <p style="margin: 0;">–¢—ã –ø—Ä–∏–Ω—è–ª <b>${correctChoices} –∏–∑ ${totalScenes}</b> —Ä–µ—à–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –¥—É—Ö—É —Å–º–µ–Ω—ã.</p>
                <p style="margin: 10px 0 0 0;">–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ –∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —É—á–∏—à—å—Å—è. –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –≤—ã–±–æ—Ä!</p>
            </div>
        `;

        reportHTML = `
            <div style="margin-top: 30px;">
                <h3 style="margin: 0 0 15px 0; color: var(--accent-warm);">–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç</h3>
                <table style="width: 100%; border-collapse: collapse; background-color: rgba(0, 0, 0, 0.3); border-radius: 4px; overflow: hidden;">
                    <thead>
                        <tr style="background-color: rgba(10, 104, 54, 0.5);">
                            <th style="padding: 10px; text-align: left; border-bottom: 1px solid var(--light-green); color: var(--white);">–°–∏—Ç—É–∞—Ü–∏—è</th>
                            <th style="padding: 10px; text-align: left; border-bottom: 1px solid var(--light-green); color: var(--white);">–í—ã–±–æ—Ä</th>
                            <th style="padding: 10px; text-align: center; border-bottom: 1px solid var(--light-green); color: var(--white);">–°—Ç–∞—Ç—É—Å</th>
                            <th style="padding: 10px; text-align: left; border-bottom: 1px solid var(--light-green); color: var(--white);">–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏–µ</th>
                        </tr>
                    </thead>
                    <tbody>
        `;

        consequencesReport.forEach((report, index) => {
            const status = report.isCorrect ? '‚úÖ –í–ï–†–ù–û' : '‚ùå –û–®–ò–ë–ö–ê';
            const statusColor = report.isCorrect ? 'color: #49a861;' : 'color: #ff4444;';
            const consequenceText = report.consequence.replace(/\*\*/g, '<b>').replace(/\*\*/g, '</b>');

            reportHTML += `
                <tr style="border-bottom: 1px solid rgba(255, 255, 255, 0.1);">
                    <td style="padding: 10px; font-weight: bold;">${index + 1}. ${report.scene}</td>
                    <td style="padding: 10px;">"${report.choice}"</td>
                    <td style="padding: 10px; text-align: center; font-weight: bold; ${statusColor}">${status}</td>
                    <td style="padding: 10px;">${consequenceText}</td>
                </tr>
            `;
        });

        reportHTML += `
                    </tbody>
                </table>
            </div>
        `;
    } else if (scene.story) {
        let endingStoryHTML = '';
        scene.story.forEach(step => {
            if (step.speaker) {
                endingStoryHTML += `<p><b>${step.speaker}:</b> ${step.text.replace(/\*\*/g, '<b>').replace(/\*\*/g, '</b>')}</p>`;
            } else {
                endingStoryHTML += `<p>${step.text.replace(/\*\*/g, '<b>').replace(/\*\*/g, '</b>')}</p>`;
            }
        });
        mainText = endingStoryHTML;
    } else if (scene.text) {
        mainText = scene.text.replace(/\*\*/g, '<b>').replace(/\*\*/g, '</b>');
    }
    
    storyText.innerHTML = mainText + overallText + reportHTML;
    showChoices(scene);
}

function handleVideoEnding(scene) {
    gameContainer.style.display = 'none';
    endingScreen.style.display = 'flex';
    
    const video = gameEndingVideo;
    const playBtn = document.getElementById('play-video-btn');
    finalMessage.style.display = 'none';
    playBtn.style.display = 'none';
    video.style.display = 'block';
    
    video.src = '1013.mp4';
    video.load();
    video.muted = false;
    video.preload = 'metadata';
    
    const playPromise = video.play();
    playPromise.then(() => {
        console.log('–í–∏–¥–µ–æ –∞–≤—Ç–æ–∑–∞–ø—É—Å—Ç–∏–ª–æ—Å—å (muted).');
        video.addEventListener('click', () => {
            video.muted = false;
        }, { once: true });
    }).catch(e => {
        console.warn('–ê–≤—Ç–æ–ø–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É play:', e);
        playBtn.style.display = 'block';
        playBtn.onclick = () => {
            video.muted = false;
            video.play().catch(err => {
                console.error('–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ play:', err);
                video.style.display = 'none';
                playBtn.style.display = 'none';
                finalMessage.innerHTML = scene.finalText ? scene.finalText.replace(/\*\*/g, '<b>') : '–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≤–∏–¥–µ–æ. –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.';
                finalMessage.style.display = 'block';
                endingRestartButton.style.display = 'block';
            });
        };
    });

    video.onended = () => {
        backgroundMusic.pause();
        currentBGM = null;
        video.style.display = 'none';
        playBtn.style.display = 'none';
        finalMessage.innerHTML = scene.finalText ? scene.finalText.replace(/\*\*/g, '<b>') : '–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.';
        finalMessage.style.display = 'block';
        endingRestartButton.style.display = 'block';
    };

    video.onerror = () => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ (–∫–æ–¥–µ–∫/–ø—É—Ç—å?).');
        video.style.display = 'none';
        playBtn.style.display = 'none';
        finalMessage.innerHTML = '<p style="color: #ff4444;">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª 1013.mp4). –§–∏–Ω–∞–ª:</p>' + (scene.finalText ? scene.finalText.replace(/\*\*/g, '<b>') : '');
        finalMessage.style.display = 'block';
        endingRestartButton.style.display = 'block';
    };
}

// === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò–ì–†–´ ===
function initializeGame(continueMode = false) {
    gameContainer.style.display = 'block';
    hideMainMenu();
    
    if (continueMode && loadGame()) {
        showScene(currentSceneId);
    } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
        if (userSettings.skipTutorial) {
            currentSceneId = 'scene1';
        } else {
            currentSceneId = 'welcome_message';
        }
        showScene(currentSceneId);
    }
    
    loadingOverlay.classList.add('fade-out');
    setTimeout(() => {
        loadingOverlay.style.display = 'none';
        loadingOverlay.classList.remove('fade-out');
    }, 500);
}

function resetGame() {
    correctChoices = 0;
    totalScenes = 0;
    consequencesReport = [];
    currentSceneId = 'welcome_message';
    dialogHistory = [];
    currentStoryIndex = 0;
    isAwaitingChoice = false;
    isAwaitingConsequenceClick = false;
    hintUsedCount = 0;
    skipCount = 0;
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
document.addEventListener('DOMContentLoaded', () => {
    loadSettings();
    loadAchievements();
    updateAudioVolumes();

    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    newGameBtn.onclick = () => {
        resetGame();
        localStorage.removeItem('kamerton_save');
        initializeGame(false);
    };

    continueGameBtn.onclick = () => {
        initializeGame(true);
    };

    settingsBtn.onclick = showSettings;
    achievementsBtn.onclick = showAchievements;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    document.getElementById('settings-back-btn').onclick = () => {
        hideSettings();
        if (gameContainer.style.display === 'none') {
            showMainMenu();
        }
    };

    document.getElementById('text-speed-slider').oninput = (e) => {
        userSettings.textSpeed = parseFloat(e.target.value);
        document.getElementById('text-speed-value').textContent = userSettings.textSpeed + 'x';
        saveSettings();
    };

    document.getElementById('bgm-volume-slider').oninput = (e) => {
        userSettings.bgmVolume = parseFloat(e.target.value);
        document.getElementById('bgm-volume-value').textContent = Math.round(userSettings.bgmVolume * 100) + '%';
        updateAudioVolumes();
        saveSettings();
    };

    document.getElementById('sfx-volume-slider').oninput = (e) => {
        userSettings.sfxVolume = parseFloat(e.target.value);
        document.getElementById('sfx-volume-value').textContent = Math.round(userSettings.sfxVolume * 100) + '%';
        updateAudioVolumes();
        saveSettings();
    };

    document.getElementById('skip-tutorial-checkbox').onchange = (e) => {
        userSettings.skipTutorial = e.target.checked;
        saveSettings();
    };

    // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    document.getElementById('achievements-back-btn').onclick = () => {
        hideAchievements();
        showMainMenu();
    };

    // –ü–∞—É–∑–∞
    pauseMenuBtn.onclick = showPause;
    document.getElementById('resume-btn').onclick = hidePause;
    document.getElementById('pause-settings-btn').onclick = () => {
        hidePause();
        showSettings();
    };
    document.getElementById('save-game-btn').onclick = () => {
        saveGame();
        hidePause();
    };
    document.getElementById('main-menu-btn').onclick = () => {
        if (confirm('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é? –ù–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç —É—Ç–µ—Ä—è–Ω.')) {
            hidePause();
            resetGame();
            showMainMenu();
        }
    };

    // –ò—Å—Ç–æ—Ä–∏—è
    historyBtn.onclick = showHistory;
    document.getElementById('history-close-btn').onclick = hideHistory;

    // –ü–æ–¥—Å–∫–∞–∑–∫–∞
    hintButton.onclick = () => {
        if (!isAdvancing && isAwaitingChoice) {
            handleChoice(currentSceneId, null, true);
        }
    };

    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    document.addEventListener('keydown', (e) => {
        if (e.key === ' ' || e.key === 'Enter') {
            if (pauseMenu.style.display === 'flex' || 
                settingsScreen.style.display === 'flex' || 
                achievementsScreen.style.display === 'flex' ||
                historyPanel.style.display === 'flex' ||
                mainMenu.style.display === 'flex') {
                return;
            }
            e.preventDefault();
            goToNextStoryStep();
        } else if (e.key === 'Escape') {
            if (pauseMenu.style.display === 'flex') {
                hidePause();
            } else if (historyPanel.style.display === 'flex') {
                hideHistory();
            } else if (gameContainer.style.display !== 'none') {
                showPause();
            }
        } else if (e.key === 'h' || e.key === 'H' || e.key === '—Ä' || e.key === '–†') {
            if (gameContainer.style.display !== 'none' && historyPanel.style.display === 'none') {
                showHistory();
            }
        }
    });

    // –†–µ—Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–æ–≤–∫–∏
    endingRestartButton.onclick = () => {
        endingScreen.style.display = 'none';
        resetGame();
        showMainMenu();
    };
});

// === –ó–ê–ü–£–°–ö –ò–ì–†–´ ===
window.onload = async () => {
    gameContainer.style.display = 'none';
    mainMenu.style.display = 'none';
    loadingOverlay.style.display = 'flex';
    loadingOverlay.classList.remove('fade-out');

    await preloadCriticalAssets();

    loadingText.textContent = '–ì–æ—Ç–æ–≤–æ! –ù–∞–∂–º–∏—Ç–µ "–ù–ê–ß–ê–¢–¨ –ò–ì–†–£".';
    startGameButton.style.display = 'block';
    startGameButton.onclick = () => {
        loadingOverlay.classList.add('fade-out');
        setTimeout(() => {
            loadingOverlay.style.display = 'none';
            showMainMenu();
        }, 500);
    };
};

// CSS –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥–æ–±–∞–≤–∏—Ç—å –≤ style.css –∏–ª–∏ —á–µ—Ä–µ–∑ JS)
const style = document.createElement('style');
style.textContent = `
    @keyframes slideIn {
        from {
            transform: translateX(400px);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    @keyframes slideOut {
        from {
            transform: translateX(0);
            opacity: 1;
        }
        to {
            transform: translateX(400px);
            opacity: 0;
        }
    }
    
    @keyframes fadeInOut {
        0% { opacity: 0; }
        10% { opacity: 1; }
        90% { opacity: 1; }
        100% { opacity: 0; }
    }
`;
document.head.appendChild(style);