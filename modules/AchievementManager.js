// modules/AchievementManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏

export class AchievementManager {
    constructor(storageManager) {
        this.storage = storageManager;

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.achievements = {
            first_choice: {
                title: '–ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä',
                desc: '–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä',
                icon: 'üéØ',
                unlocked: false
            },
            perfect_run: {
                title: '–ò–¥–µ–∞–ª—å–Ω–∞—è –≥–∞—Ä–º–æ–Ω–∏—è',
                desc: '–ü—Ä–æ–π–¥–∏—Ç–µ –∏–≥—Ä—É –±–µ–∑ –æ—à–∏–±–æ–∫',
                icon: 'üèÜ',
                unlocked: false
            },
            hint_master: {
                title: '–ú—É–¥—Ä—ã–π —Å–æ–≤–µ—Ç–Ω–∏–∫',
                desc: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É 3 —Ä–∞–∑–∞',
                icon: '‚òØ',
                unlocked: false
            },
            speed_reader: {
                title: '–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π —á–∏—Ç–∞—Ç–µ–ª—å',
                desc: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç 10 —Ä–∞–∑',
                icon: '‚ö°',
                unlocked: false
            },
            storyteller: {
                title: '–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∏—Å—Ç–æ—Ä–∏–π',
                desc: '–û—Ç–∫—Ä–æ–π—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤',
                icon: 'üìú',
                unlocked: false
            },
            completionist: {
                title: '–§–∏–Ω–∞–ª–∏—Å—Ç',
                desc: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É',
                icon: 'üé¨',
                unlocked: false
            },
            explorer: {
                title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
                desc: '–ü–æ—Å–µ—Ç–∏—Ç–µ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω—ã',
                icon: 'üó∫Ô∏è',
                unlocked: false
            }
        };

        this.loadFromStorage();
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage
    loadFromStorage() {
        const saved = this.storage.getItem('achievements');

        if (saved && typeof saved === 'object') {
            Object.keys(saved).forEach(key => {
                if (this.achievements[key]) {
                    this.achievements[key].unlocked = saved[key];
                }
            });
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
    saveToStorage() {
        const toSave = {};
        Object.keys(this.achievements).forEach(key => {
            toSave[key] = this.achievements[key].unlocked;
        });

        this.storage.setItem('achievements', toSave);
    }

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    unlock(key) {
        if (!this.achievements[key]) {
            console.warn(`Achievement '${key}' not found`);
            return false;
        }

        if (this.achievements[key].unlocked) {
            return false; // –£–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        }

        this.achievements[key].unlocked = true;
        this.saveToStorage();
        this._showNotification(this.achievements[key]);

        console.log(`üèÜ Achievement unlocked: ${this.achievements[key].title}`);
        return true;
    }

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
    isUnlocked(key) {
        return this.achievements[key]?.unlocked || false;
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    getAll() {
        return Object.keys(this.achievements).map(key => ({
            key,
            ...this.achievements[key]
        }));
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    getUnlocked() {
        return this.getAll().filter(ach => ach.unlocked);
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å (%)
    getProgress() {
        const total = Object.keys(this.achievements).length;
        const unlocked = this.getUnlocked().length;
        return {
            unlocked,
            total,
            percentage: ((unlocked / total) * 100).toFixed(1)
        };
    }

    // –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    resetAll() {
        Object.keys(this.achievements).forEach(key => {
            this.achievements[key].unlocked = false;
        });
        this.saveToStorage();
        console.log('üóëÔ∏è All achievements reset');
    }

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    unlockAll() {
        Object.keys(this.achievements).forEach(key => {
            this.achievements[key].unlocked = true;
        });
        this.saveToStorage();
        console.log('üéâ All achievements unlocked');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    _showNotification(achievement) {
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 80px;
            right: 20px;
            background: linear-gradient(135deg, #0A6836, #49a861);
            color: white;
            padding: 15px 20px;
            border-radius: 10px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.5);
            z-index: 10002;
            animation: slideIn 0.5s ease-out;
            max-width: 300px;
        `;

        notification.innerHTML = `
            <div style="display: flex; align-items: center; gap: 15px;">
                <span style="font-size: 2em;">${achievement.icon}</span>
                <div>
                    <div style="font-weight: bold; margin-bottom: 5px;">–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ!</div>
                    <div style="font-size: 0.9em;">${achievement.title}</div>
                </div>
            </div>
        `;

        document.body.appendChild(notification);

        setTimeout(() => {
            notification.style.animation = 'slideOut 0.5s ease-in';
            setTimeout(() => notification.remove(), 500);
        }, 3000);
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    export() {
        return {
            achievements: this.achievements,
            progress: this.getProgress(),
            exportedAt: new Date().toISOString()
        };
    }

    // –ò–º–ø–æ—Ä—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    import(data) {
        if (!data || !data.achievements) {
            console.error('Invalid achievement data');
            return false;
        }

        try {
            Object.keys(data.achievements).forEach(key => {
                if (this.achievements[key]) {
                    this.achievements[key].unlocked = data.achievements[key].unlocked;
                }
            });

            this.saveToStorage();
            console.log('‚úÖ Achievements imported');
            return true;
        } catch (e) {
            console.error('Failed to import achievements:', e);
            return false;
        }
    }
}
