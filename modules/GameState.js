// modules/GameState.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã

export class GameState {
    constructor(storageManager) {
        this.storage = storageManager;
        this.reset();
    }

    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
    reset() {
        this.currentSceneId = 'welcome_message';
        this.correctChoices = 0;
        this.totalScenes = 0;
        this.consequencesReport = [];
        this.dialogHistory = [];
        this.currentStoryIndex = 0;
        this.autoSaveCounter = 0;
        this.sceneStack = [];

        // –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        this.isAwaitingChoice = false;
        this.isAwaitingConsequenceClick = false;
        this.isAdvancing = false;
        this.isTyping = false;

        // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        this.hintUsedCount = 0;
        this.skipCount = 0;
    }

    // === –°–û–•–†–ê–ù–ï–ù–ò–ï/–ó–ê–ì–†–£–ó–ö–ê ===
    save(isAutoSave = false) {
        const saveData = {
            currentSceneId: this.currentSceneId,
            correctChoices: this.correctChoices,
            totalScenes: this.totalScenes,
            consequencesReport: this.consequencesReport,
            dialogHistory: this.dialogHistory.slice(-100), // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100
            timestamp: Date.now(),
            version: '1.1'
        };

        const success = this.storage.setItem('save', saveData);

        if (!isAutoSave && success) {
            this._showNotification('–ò–≥—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        } else if (!isAutoSave && !success) {
            this._showNotification('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!');
        }

        return success;
    }

    load() {
        const saveData = this.storage.getItem('save');

        if (!saveData) return false;

        try {
            this.currentSceneId = saveData.currentSceneId || 'welcome_message';
            this.correctChoices = saveData.correctChoices || 0;
            this.totalScenes = saveData.totalScenes || 0;
            this.consequencesReport = saveData.consequencesReport || [];
            this.dialogHistory = saveData.dialogHistory || [];

            console.log('‚úÖ Game loaded from save:', saveData.timestamp ? new Date(saveData.timestamp).toLocaleString() : 'unknown');
            return true;
        } catch (e) {
            console.error('Failed to parse save data:', e);
            return false;
        }
    }

    hasSave() {
        return this.storage.hasItem('save');
    }

    deleteSave() {
        return this.storage.removeItem('save');
    }

    // === –ê–í–¢–û–°–û–•–†–ê–ù–ï–ù–ò–ï ===
    checkAutoSave() {
        if (this.currentSceneId.startsWith('scene')) {
            this.autoSaveCounter++;

            if (this.autoSaveCounter >= 3) {
                this.save(true);
                this.autoSaveCounter = 0;
                console.log('üîÑ Auto-saved');
            }
        }
    }

    // === –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–û–í ===
    addToHistory(speaker, text) {
        if (!text) return;

        this.dialogHistory.push({
            speaker: speaker || '',
            text: text,
            timestamp: Date.now()
        });

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 100 –∑–∞–ø–∏—Å—è–º–∏
        if (this.dialogHistory.length > 100) {
            this.dialogHistory.shift();
        }
    }

    getHistory() {
        return this.dialogHistory;
    }

    clearHistory() {
        this.dialogHistory = [];
    }

    // === –ü–û–°–õ–ï–î–°–¢–í–ò–Ø –í–´–ë–û–†–û–í ===
    addConsequence(scene, choice, consequence, isCorrect) {
        this.consequencesReport.push({
            scene: scene,
            choice: choice,
            consequence: consequence,
            isCorrect: isCorrect,
            timestamp: Date.now()
        });
    }

    getConsequences() {
        return this.consequencesReport;
    }

    // === –ü–†–û–ì–†–ï–°–° ===
    incrementScenes() {
        this.totalScenes++;
    }

    incrementCorrectChoices() {
        this.correctChoices++;
    }

    getProgress() {
        return {
            totalScenes: this.totalScenes,
            correctChoices: this.correctChoices,
            accuracy: this.totalScenes > 0 ? (this.correctChoices / this.totalScenes * 100).toFixed(1) : 0
        };
    }

    isPerfectRun() {
        return this.totalScenes > 0 && this.correctChoices === this.totalScenes;
    }

    // === –°–¢–ï–ö –°–¶–ï–ù (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –ø–æ–¥—Å–∫–∞–∑–∫–∏) ===
    pushScene(sceneId) {
        this.sceneStack.push(sceneId);
    }

    popScene() {
        return this.sceneStack.pop();
    }

    // === –§–õ–ê–ì–ò –°–û–°–¢–û–Ø–ù–ò–Ø ===
    setAwaitingChoice(value) {
        this.isAwaitingChoice = value;
    }

    setAwaitingConsequence(value) {
        this.isAwaitingConsequenceClick = value;
    }

    setAdvancing(value) {
        this.isAdvancing = value;
    }

    setTyping(value) {
        this.isTyping = value;
    }

    // === –°–ß–ï–¢–ß–ò–ö–ò –î–õ–Ø –î–û–°–¢–ò–ñ–ï–ù–ò–ô ===
    incrementHintUsed() {
        this.hintUsedCount++;
        return this.hintUsedCount;
    }

    incrementSkip() {
        this.skipCount++;
        return this.skipCount;
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    getSceneNumber() {
        const match = this.currentSceneId.match(/scene(\d+)/);
        return match ? parseInt(match[1]) : 0;
    }

    isInTutorial() {
        return this.currentSceneId.startsWith('tutorial');
    }

    isInEnding() {
        return this.currentSceneId.startsWith('ending');
    }

    // === –≠–ö–°–ü–û–†–¢/–ò–ú–ü–û–†–¢ ===
    exportToJSON() {
        return {
            ...this.save(),
            exported: new Date().toISOString()
        };
    }

    importFromJSON(data) {
        if (!data || typeof data !== 'object') {
            console.error('Invalid import data');
            return false;
        }

        try {
            this.currentSceneId = data.currentSceneId || 'welcome_message';
            this.correctChoices = data.correctChoices || 0;
            this.totalScenes = data.totalScenes || 0;
            this.consequencesReport = data.consequencesReport || [];
            this.dialogHistory = data.dialogHistory || [];

            console.log('‚úÖ Game state imported');
            return true;
        } catch (e) {
            console.error('Failed to import game state:', e);
            return false;
        }
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    _showNotification(text) {
        if (typeof window !== 'undefined' && window.showNotification) {
            window.showNotification(text);
        }
    }
}
