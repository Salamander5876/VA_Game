// modules/StorageManager.js - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ localStorage —Å –∫–æ–º–ø—Ä–µ—Å—Å–∏–µ–π

export class StorageManager {
    constructor() {
        this.compressionEnabled = true;
        this.prefix = 'kamerton_';
    }

    // === –ö–û–ú–ü–†–ï–°–°–ò–Ø ===
    compress(str) {
        if (!this.compressionEnabled) return str;
        try {
            return btoa(encodeURIComponent(str));
        } catch (e) {
            console.warn('Compression failed:', e);
            return str;
        }
    }

    decompress(str) {
        if (!this.compressionEnabled) return str;
        try {
            return decodeURIComponent(atob(str));
        } catch (e) {
            console.warn('Decompression failed:', e);
            return str;
        }
    }

    // === –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ===
    setItem(key, value) {
        try {
            const fullKey = this.prefix + key;
            const jsonString = JSON.stringify(value);
            const compressed = this.compress(jsonString);

            localStorage.setItem(fullKey, compressed);

            // –õ–æ–≥–∏—Ä—É–µ–º —ç–∫–æ–Ω–æ–º–∏—é
            const originalSize = new Blob([jsonString]).size;
            const compressedSize = new Blob([compressed]).size;
            const savings = ((1 - compressedSize / originalSize) * 100).toFixed(1);

            console.log(`üíæ Saved '${key}': ${originalSize}B ‚Üí ${compressedSize}B (${savings}% savings)`);
            return true;
        } catch (e) {
            if (e.name === 'QuotaExceededError') {
                console.error('localStorage quota exceeded!');
                this.handleQuotaExceeded();
            } else {
                console.error('Failed to save to localStorage:', e);
            }
            return false;
        }
    }

    getItem(key) {
        try {
            const fullKey = this.prefix + key;
            const compressed = localStorage.getItem(fullKey);

            if (!compressed) return null;

            const decompressed = this.decompress(compressed);
            return JSON.parse(decompressed);
        } catch (e) {
            console.error('Failed to load from localStorage:', e);
            return null;
        }
    }

    removeItem(key) {
        try {
            const fullKey = this.prefix + key;
            localStorage.removeItem(fullKey);
            return true;
        } catch (e) {
            console.error('Failed to remove from localStorage:', e);
            return false;
        }
    }

    hasItem(key) {
        const fullKey = this.prefix + key;
        return localStorage.getItem(fullKey) !== null;
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    getTotalSize() {
        try {
            let total = 0;
            for (let key in localStorage) {
                if (localStorage.hasOwnProperty(key) && key.startsWith(this.prefix)) {
                    total += localStorage[key].length + key.length;
                }
            }
            const totalKB = (total / 1024).toFixed(2);
            console.log(`üìä Total game storage: ${totalKB}KB`);
            return total;
        } catch (e) {
            console.warn('Could not calculate total size:', e);
            return 0;
        }
    }

    clearAll(preserveSettings = true) {
        try {
            const settings = preserveSettings ? this.getItem('settings') : null;
            const achievements = preserveSettings ? this.getItem('achievements') : null;

            // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            for (let key in localStorage) {
                if (key.startsWith(this.prefix)) {
                    localStorage.removeItem(key);
                }
            }

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (settings) this.setItem('settings', settings);
            if (achievements) this.setItem('achievements', achievements);

            console.log('üóëÔ∏è Game data cleared' + (preserveSettings ? ' (settings preserved)' : ''));
            return true;
        } catch (e) {
            console.error('Failed to clear game data:', e);
            return false;
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
    handleQuotaExceeded() {
        console.warn('Attempting to free up space...');

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        const autoSaves = [];
        for (let key in localStorage) {
            if (key.startsWith(this.prefix + 'autosave_')) {
                autoSaves.push(key);
            }
        }

        if (autoSaves.length > 0) {
            // –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            autoSaves.sort();
            localStorage.removeItem(autoSaves[0]);
            console.log('Removed old autosave to free space');
        }
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
    exportSave(key) {
        const data = this.getItem(key);
        if (!data) return null;

        const jsonString = JSON.stringify(data, null, 2);
        const blob = new Blob([jsonString], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        return { blob, url, data };
    }

    // –ò–º–ø–æ—Ä—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ JSON
    importSave(key, jsonString) {
        try {
            const data = JSON.parse(jsonString);
            return this.setItem(key, data);
        } catch (e) {
            console.error('Failed to import save:', e);
            return false;
        }
    }
}
